name: Release

on:
  push:
    tags:
      - 'v*'

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      tag-name: ${{ steps.get-tag.outputs.tag }}
    
    steps:
    - name: Get tag name
      id: get-tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Create Release
      id: create-release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get-tag.outputs.tag }}
        name: DocxTemplate ${{ steps.get-tag.outputs.tag }}
        body: |
          ## 📋 DocxTemplate Release ${{ steps.get-tag.outputs.tag }}
          
          Word document template processor with Czech language support and placeholder replacement functionality.
          
          ### 📥 Downloads
          - **Windows (x64)**: `DocxTemplate-${{ steps.get-tag.outputs.tag }}-win-x64.zip` - *Recommended*
          - **macOS (ARM64)**: `DocxTemplate-${{ steps.get-tag.outputs.tag }}-osx-arm64.zip` - *Apple Silicon*
          - **macOS (x64)**: `DocxTemplate-${{ steps.get-tag.outputs.tag }}-osx-x64.zip` - *Intel Macs*
          
          ### 🎯 What's Included
          - **GUI Application**: Easy-to-use graphical interface with step-by-step wizard
          - **CLI Tool**: Command-line interface for automation and batch processing  
          - **Sample Templates**: Czech language templates for testing
          - **Documentation**: Quick start guide and usage examples
          
          ### ✅ System Requirements
          - **Windows**: Windows 10 version 1709 or later (x64)
          - **macOS**: macOS 10.15 Catalina or later
          - **No additional software required** - fully self-contained
          
          ### 🚀 Quick Start
          1. Download the appropriate package for your platform
          2. Extract the ZIP file
          3. **Windows**: Double-click `DocxTemplate.UI.exe`
          4. **macOS**: Double-click `DocxTemplate.UI` or run `./DocxTemplate.UI`
          
          ### 🔧 CLI Usage
          ```bash
          # Windows
          docx-template.exe --help
          
          # macOS  
          ./docx-template --help
          ```
          
          Both executables are self-contained and don't require separate .NET runtime installation.
        draft: false
        prerelease: ${{ contains(steps.get-tag.outputs.tag, 'alpha') || contains(steps.get-tag.outputs.tag, 'beta') || contains(steps.get-tag.outputs.tag, 'rc') }}

  build-windows:
    name: Build Windows Distribution  
    runs-on: windows-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: windows-release-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: windows-release-nuget-
        
    - name: Clean and restore dependencies
      run: |
        dotnet clean --verbosity minimal
        dotnet restore --verbosity minimal
      
    - name: Build and test before release
      run: |
        # Build CLI first to avoid file locking issues
        dotnet build src/DocxTemplate.CLI/DocxTemplate.CLI.csproj --configuration Release --verbosity minimal
        
        # Test CLI executable can be built and runs
        Write-Host "Testing CLI build..." -ForegroundColor Cyan
        dotnet run --project src/DocxTemplate.CLI/DocxTemplate.CLI.csproj --configuration Release --verbosity minimal -- --version
        
        # Build UI project (with SkipCliBuild to avoid conflicts)  
        dotnet build src/DocxTemplate.UI/DocxTemplate.UI.csproj --configuration Release --verbosity minimal
        
        Write-Host "Pre-release build and test completed successfully" -ForegroundColor Green
      
    - name: Publish Windows GUI (portable)
      run: |
        Write-Host "Publishing GUI application..." -ForegroundColor Cyan
        dotnet publish src/DocxTemplate.UI/DocxTemplate.UI.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained true `
          --output ./dist/windows-gui `
          --verbosity minimal `
          -p:SkipCliBuild=true `
          -p:PublishSingleFile=false `
          -p:PublishTrimmed=false `
          -p:PublishReadyToRun=false
          
    - name: Publish Windows CLI (single-file)
      run: |
        Write-Host "Publishing CLI application..." -ForegroundColor Cyan  
        dotnet publish src/DocxTemplate.CLI/DocxTemplate.CLI.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained true `
          --output ./dist/windows-cli `
          --verbosity minimal `
          -p:PublishSingleFile=true `
          -p:EnableCompressionInSingleFile=true `
          -p:PublishTrimmed=false `
          -p:PublishReadyToRun=true
      
    - name: Create Windows distribution package
      run: |
        $releaseDir = "./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-win-x64"
        Write-Host "Creating release directory: $releaseDir" -ForegroundColor Cyan
        New-Item -ItemType Directory -Force -Path $releaseDir | Out-Null
        
        # Copy GUI application and its dependencies (portable distribution)
        Write-Host "Copying GUI application..." -ForegroundColor Yellow
        Copy-Item -Path "./dist/windows-gui/DocxTemplate.UI.exe" -Destination "$releaseDir/"
        Copy-Item -Path "./dist/windows-gui/*.dll" -Destination "$releaseDir/" -ErrorAction SilentlyContinue
        
        # Copy CLI executable (single-file, user-friendly name)
        Write-Host "Copying CLI application..." -ForegroundColor Yellow  
        Copy-Item -Path "./dist/windows-cli/DocxTemplate.CLI.exe" -Destination "$releaseDir/docx-template.exe"
        
        # Copy sample templates if they exist
        if (Test-Path "templates") {
            Write-Host "Copying sample templates..." -ForegroundColor Yellow
            Copy-Item -Path "templates" -Destination "$releaseDir/" -Recurse
        } else {
            Write-Host "No templates directory found, skipping..." -ForegroundColor Gray
        }
        
        # Create GUI launcher batch file for convenience  
        Write-Host "Creating launcher scripts..." -ForegroundColor Yellow
        @'
@echo off
cd /d "%~dp0"
echo Starting DocxTemplate GUI Application...
start "" "DocxTemplate.UI.exe"
'@ | Out-File -FilePath "$releaseDir/Launch-GUI.bat" -Encoding ASCII
        
        # Create CLI wrapper batch file
        @'
@echo off
cd /d "%~dp0"  
"%~dp0docx-template.exe" %*
'@ | Out-File -FilePath "$releaseDir/docx-template.bat" -Encoding ASCII
        
        # Create comprehensive README
        Write-Host "Creating documentation..." -ForegroundColor Yellow
        @"
DocxTemplate ${{ needs.create-release.outputs.tag-name }} - Windows x64 Distribution
================================================================

QUICK START:
1. Double-click 'DocxTemplate.UI.exe' to launch the GUI application
2. Or double-click 'Launch-GUI.bat' for the same effect
3. For command line usage, run 'docx-template.exe --help' in Command Prompt

INCLUDED FILES:
- DocxTemplate.UI.exe       - Main graphical application
- docx-template.exe         - Command line tool (single-file)  
- docx-template.bat         - Command line wrapper script
- Launch-GUI.bat           - GUI launcher script
- templates/               - Sample Czech language templates
- *.dll                    - Required runtime libraries for GUI
- README.txt               - This file

SYSTEM REQUIREMENTS:
- Windows 10 version 1709 (Fall Creators Update) or later
- x64 (64-bit) architecture
- No additional software installation required
- Approximately 200MB disk space for full installation

FEATURES:
- Czech language support with proper character encoding
- Placeholder replacement in Word documents (.docx)
- Batch processing capabilities via CLI
- Step-by-step wizard interface via GUI  
- Template structure preservation

QUICK EXAMPLES:

GUI Usage:
  Just double-click DocxTemplate.UI.exe and follow the wizard!

Command Line Usage:
  # Show help
  docx-template.exe --help
  
  # Discover template sets
  docx-template.exe list-sets --templates "./templates"
  
  # Scan for placeholders  
  docx-template.exe scan --path "./templates" --output json
  
  # Process templates with replacements
  docx-template.exe copy --templates "./templates" --output "./output" --mapping "./data.json"

TROUBLESHOOTING:
- If GUI doesn't start, ensure you have Windows 10 version 1709 or later
- If CLI commands fail, try running from Command Prompt as Administrator
- For Czech characters, ensure your system supports UTF-8 encoding

SUPPORT:
- Documentation: https://github.com/jirihalaska/docx-template-cli
- Issues & Bug Reports: https://github.com/jirihalaska/docx-template-cli/issues
- Version: ${{ needs.create-release.outputs.tag-name }}
- Build Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")

LICENSE:
This software is distributed under the MIT License.
See the LICENSE file in the source repository for full details.
"@ | Out-File -FilePath "$releaseDir/README.txt" -Encoding UTF8
        
        Write-Host "Windows distribution package created successfully!" -ForegroundColor Green
        
        # Show package contents for verification
        Write-Host "`nPackage contents:" -ForegroundColor Cyan
        Get-ChildItem $releaseDir -Recurse | Format-Table Name, Length, LastWriteTime -AutoSize
      
    - name: Test release artifacts
      run: |
        $releaseDir = "./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-win-x64"
        Write-Host "Testing release artifacts..." -ForegroundColor Cyan
        
        # Test CLI executable
        Write-Host "Testing CLI executable..." -ForegroundColor Yellow
        & "$releaseDir/docx-template.exe" --version
        if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ CLI executable test passed" -ForegroundColor Green
        } else {
            Write-Host "❌ CLI executable test failed" -ForegroundColor Red
            exit 1
        }
        
        # Verify required files exist
        $requiredFiles = @("DocxTemplate.UI.exe", "docx-template.exe", "README.txt")
        foreach ($file in $requiredFiles) {
            if (Test-Path "$releaseDir/$file") {
                Write-Host "✅ Required file exists: $file" -ForegroundColor Green
            } else {
                Write-Host "❌ Missing required file: $file" -ForegroundColor Red
                exit 1
            }
        }
        
        Write-Host "✅ All release artifact tests passed!" -ForegroundColor Green
      
    - name: Create Windows ZIP package
      run: |
        $zipPath = "./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-win-x64.zip"
        Write-Host "Creating ZIP package: $zipPath" -ForegroundColor Cyan
        Compress-Archive -Path "./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-win-x64/*" -DestinationPath $zipPath -Force
        
        # Verify ZIP was created and show size
        if (Test-Path $zipPath) {
            $zipSize = [math]::Round((Get-Item $zipPath).Length / 1MB, 2)
            Write-Host "✅ ZIP package created successfully: ${zipSize}MB" -ForegroundColor Green
        } else {
            Write-Host "❌ Failed to create ZIP package" -ForegroundColor Red
            exit 1
        }
      
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.create-release.outputs.tag-name }}
        files: ./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-win-x64.zip
        
    - name: Upload build artifacts for inspection
      uses: actions/upload-artifact@v4
      with:
        name: windows-release-${{ needs.create-release.outputs.tag-name }}
        path: ./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-win-x64/
        retention-days: 30

  build-macos-arm64:
    name: Build macOS ARM64 Distribution
    runs-on: macos-latest  
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: macos-arm64-release-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: macos-arm64-release-nuget-
        
    - name: Clean and restore dependencies
      run: |
        dotnet clean --verbosity minimal
        dotnet restore --verbosity minimal
      
    - name: Build and test before release
      run: |
        echo "🍎 Building CLI first to avoid file locking issues..."
        dotnet build src/DocxTemplate.CLI/DocxTemplate.CLI.csproj --configuration Release --verbosity minimal
        
        echo "🧪 Testing CLI build..."
        dotnet run --project src/DocxTemplate.CLI/DocxTemplate.CLI.csproj --configuration Release --verbosity minimal -- --version
        
        echo "🎨 Building UI project..."
        dotnet build src/DocxTemplate.UI/DocxTemplate.UI.csproj --configuration Release --verbosity minimal
        
        echo "✅ Pre-release build and test completed successfully"
      
    - name: Publish macOS ARM64 GUI (portable)
      run: |
        echo "📱 Publishing GUI application for ARM64..."
        dotnet publish src/DocxTemplate.UI/DocxTemplate.UI.csproj \
          --configuration Release \
          --runtime osx-arm64 \
          --self-contained true \
          --output ./dist/macos-arm64-gui \
          --verbosity minimal \
          -p:SkipCliBuild=true \
          -p:PublishSingleFile=false \
          -p:PublishTrimmed=false \
          -p:PublishReadyToRun=false
          
    - name: Publish macOS ARM64 CLI (single-file)
      run: |
        echo "⌨️ Publishing CLI application for ARM64..."
        dotnet publish src/DocxTemplate.CLI/DocxTemplate.CLI.csproj \
          --configuration Release \
          --runtime osx-arm64 \
          --self-contained true \
          --output ./dist/macos-arm64-cli \
          --verbosity minimal \
          -p:PublishSingleFile=true \
          -p:EnableCompressionInSingleFile=true \
          -p:PublishTrimmed=false \
          -p:PublishReadyToRun=true
      
    - name: Create macOS ARM64 distribution package
      run: |
        RELEASE_DIR="./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64"
        echo "📁 Creating release directory: $RELEASE_DIR"
        mkdir -p "$RELEASE_DIR"
        
        # Copy GUI application and its dependencies (portable distribution)
        echo "📱 Copying GUI application..."
        cp "./dist/macos-arm64-gui/DocxTemplate.UI" "$RELEASE_DIR/"
        cp ./dist/macos-arm64-gui/*.dll "$RELEASE_DIR/" 2>/dev/null || true
        cp ./dist/macos-arm64-gui/*.dylib "$RELEASE_DIR/" 2>/dev/null || true
        
        # Copy CLI executable (single-file, user-friendly name)
        echo "⌨️ Copying CLI application..."
        cp "./dist/macos-arm64-cli/DocxTemplate.CLI" "$RELEASE_DIR/docx-template"
        
        # Make executables executable
        echo "🔧 Setting executable permissions..."
        chmod +x "$RELEASE_DIR/DocxTemplate.UI"
        chmod +x "$RELEASE_DIR/docx-template"
        
        # Copy sample templates if they exist
        if [ -d "templates" ]; then
            echo "📄 Copying sample templates..."
            cp -r templates "$RELEASE_DIR/"
        else
            echo "⚠️ No templates directory found, skipping..."
        fi
        
        # Create GUI launcher script for convenience
        echo "🚀 Creating launcher scripts..."
        cat > "$RELEASE_DIR/Launch-GUI.sh" << 'EOF'
#!/bin/bash
cd "$(dirname "$0")"
echo "Starting DocxTemplate GUI Application..."
if [[ "$OSTYPE" == "darwin"* ]]; then
    open -a "./DocxTemplate.UI" || ./DocxTemplate.UI
else
    ./DocxTemplate.UI
fi
EOF
        chmod +x "$RELEASE_DIR/Launch-GUI.sh"
        
        # Create CLI wrapper script
        cat > "$RELEASE_DIR/docx-template.sh" << 'EOF'
#!/bin/bash  
cd "$(dirname "$0")"
"$(dirname "$0")/docx-template" "$@"
EOF
        chmod +x "$RELEASE_DIR/docx-template.sh"
        
        # Create comprehensive README
        echo "📝 Creating documentation..."
        cat > "$RELEASE_DIR/README.md" << 'EOF'
# DocxTemplate ${{ needs.create-release.outputs.tag-name }} - macOS ARM64 (Apple Silicon)

## Quick Start
1. **GUI**: Double-click `DocxTemplate.UI` or run `./Launch-GUI.sh`
2. **CLI**: Open Terminal and run `./docx-template --help`

## Included Files
- `DocxTemplate.UI` - Main graphical application
- `docx-template` - Command line tool (single-file)
- `docx-template.sh` - Command line wrapper script  
- `Launch-GUI.sh` - GUI launcher script
- `templates/` - Sample Czech language templates
- `*.dll`, `*.dylib` - Required runtime libraries for GUI
- `README.md` - This file

## System Requirements
- **macOS**: macOS 10.15 Catalina or later
- **Architecture**: Apple Silicon (M1, M2, M3) - ARM64
- **Disk Space**: Approximately 200MB for full installation
- **No additional software required** - fully self-contained

## Features
- ✅ Czech language support with proper character encoding
- ✅ Placeholder replacement in Word documents (.docx)
- ✅ Batch processing capabilities via CLI
- ✅ Step-by-step wizard interface via GUI
- ✅ Template structure preservation
- ✅ Native Apple Silicon performance

## Quick Examples

### GUI Usage
Just double-click `DocxTemplate.UI` and follow the wizard!

### Command Line Usage
```bash
# Show help
./docx-template --help

# Discover template sets
./docx-template list-sets --templates "./templates"

# Scan for placeholders
./docx-template scan --path "./templates" --output json

# Process templates with replacements  
./docx-template copy --templates "./templates" --output "./output" --mapping "./data.json"
```

## Installation
1. Download and extract this package
2. Open Terminal and navigate to the extracted folder
3. Run `chmod +x DocxTemplate.UI docx-template` if needed
4. Start with `./DocxTemplate.UI` or `./docx-template --help`

## Troubleshooting
- **"Cannot be opened because the developer cannot be verified"**: 
  - Right-click → Open → Open anyway, or
  - Run: `xattr -d com.apple.quarantine DocxTemplate.UI docx-template`
- **Permission denied**: Run `chmod +x DocxTemplate.UI docx-template`
- **Czech characters not displaying**: Ensure your system supports UTF-8

## Support
- 📖 **Documentation**: https://github.com/jirihalaska/docx-template-cli  
- 🐛 **Issues**: https://github.com/jirihalaska/docx-template-cli/issues
- 🏷️ **Version**: ${{ needs.create-release.outputs.tag-name }}
- 📅 **Build**: $(date '+%Y-%m-%d %H:%M:%S UTC')

## License
MIT License - See repository for full details.
EOF
        
        echo "✅ macOS ARM64 distribution package created successfully!"
        
        # Show package contents for verification
        echo ""
        echo "📦 Package contents:"
        ls -la "$RELEASE_DIR"
      
    - name: Test release artifacts
      run: |
        RELEASE_DIR="./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64"
        echo "🧪 Testing release artifacts..."
        
        # Test CLI executable
        echo "⌨️ Testing CLI executable..."
        "$RELEASE_DIR/docx-template" --version
        if [ $? -eq 0 ]; then
            echo "✅ CLI executable test passed"
        else
            echo "❌ CLI executable test failed"
            exit 1
        fi
        
        # Verify required files exist
        REQUIRED_FILES=("DocxTemplate.UI" "docx-template" "README.md")
        for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$RELEASE_DIR/$file" ]; then
                echo "✅ Required file exists: $file"
            else
                echo "❌ Missing required file: $file"
                exit 1
            fi
        done
        
        echo "✅ All release artifact tests passed!"
      
    - name: Create macOS ARM64 ZIP package
      run: |
        ZIP_PATH="./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64.zip"
        echo "📦 Creating ZIP package: $ZIP_PATH"
        cd "./release"
        zip -r "DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64.zip" "DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64/"
        
        # Verify ZIP was created and show size
        if [ -f "DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64.zip" ]; then
            ZIP_SIZE=$(du -h "DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64.zip" | cut -f1)
            echo "✅ ZIP package created successfully: ${ZIP_SIZE}"
        else
            echo "❌ Failed to create ZIP package"
            exit 1
        fi
        
        cd ..
      
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.create-release.outputs.tag-name }}
        files: ./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64.zip
        
    - name: Upload build artifacts for inspection
      uses: actions/upload-artifact@v4
      with:
        name: macos-arm64-release-${{ needs.create-release.outputs.tag-name }}
        path: ./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64/
        retention-days: 30

  build-macos-x64:
    name: Build macOS x64 Distribution (Intel)
    runs-on: macos-13  # Use Intel runner for x64 builds
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: macos-x64-release-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: macos-x64-release-nuget-
        
    - name: Build macOS x64 distribution
      run: |
        echo "🖥️ Building DocxTemplate for macOS x64 (Intel)..."
        
        # Clean and restore
        dotnet clean --verbosity minimal
        dotnet restore --verbosity minimal
        
        # Build and test
        dotnet build src/DocxTemplate.CLI/DocxTemplate.CLI.csproj --configuration Release --verbosity minimal
        dotnet run --project src/DocxTemplate.CLI/DocxTemplate.CLI.csproj --configuration Release --verbosity minimal -- --version
        dotnet build src/DocxTemplate.UI/DocxTemplate.UI.csproj --configuration Release --verbosity minimal
        
        # Publish for x64
        dotnet publish src/DocxTemplate.UI/DocxTemplate.UI.csproj \
          -c Release -r osx-x64 --self-contained \
          -p:SkipCliBuild=true -p:PublishSingleFile=false \
          -o ./dist/macos-x64-gui --verbosity minimal
          
        dotnet publish src/DocxTemplate.CLI/DocxTemplate.CLI.csproj \
          -c Release -r osx-x64 --self-contained \
          -p:PublishSingleFile=true -p:EnableCompressionInSingleFile=true \
          -o ./dist/macos-x64-cli --verbosity minimal
        
        # Create distribution
        RELEASE_DIR="./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-x64"
        mkdir -p "$RELEASE_DIR"
        
        cp "./dist/macos-x64-gui/DocxTemplate.UI" "$RELEASE_DIR/"
        cp ./dist/macos-x64-gui/*.dll "$RELEASE_DIR/" 2>/dev/null || true
        cp ./dist/macos-x64-gui/*.dylib "$RELEASE_DIR/" 2>/dev/null || true
        cp "./dist/macos-x64-cli/DocxTemplate.CLI" "$RELEASE_DIR/docx-template"
        
        chmod +x "$RELEASE_DIR/DocxTemplate.UI" "$RELEASE_DIR/docx-template"
        
        # Copy templates if available
        [ -d "templates" ] && cp -r templates "$RELEASE_DIR/" || echo "No templates directory"
        
        # Create documentation
        cat > "$RELEASE_DIR/README.md" << 'EOF'
# DocxTemplate ${{ needs.create-release.outputs.tag-name }} - macOS x64 (Intel)

This version is optimized for Intel-based Macs.

## Quick Start
- **GUI**: Double-click `DocxTemplate.UI`
- **CLI**: Run `./docx-template --help`

## System Requirements
- macOS 10.15 Catalina or later
- Intel x64 processor
- No additional software required

For Apple Silicon Macs (M1/M2/M3), download the ARM64 version for better performance.

## Support
📖 https://github.com/jirihalaska/docx-template-cli
EOF
        
        # Test and package
        "$RELEASE_DIR/docx-template" --version || exit 1
        
        cd "./release"
        zip -r "DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-x64.zip" "DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-x64/"
        cd ..
        
        echo "✅ macOS x64 distribution created successfully"
      
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.create-release.outputs.tag-name }}
        files: ./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-x64.zip