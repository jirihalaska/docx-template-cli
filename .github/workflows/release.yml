name: Release

on:
  push:
    tags:
      - 'v*'

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      tag-name: ${{ steps.get-tag.outputs.tag }}
    
    steps:
    - name: Get tag name
      id: get-tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Create Release
      id: create-release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get-tag.outputs.tag }}
        name: DocxTemplate ${{ steps.get-tag.outputs.tag }}
        body: |
          ## üìã DocxTemplate Release ${{ steps.get-tag.outputs.tag }}
          
          Word document template processor with Czech language support and placeholder replacement functionality.
          
          ### üì• Downloads
          - **Windows (x64)**: `DocxTemplate-${{ steps.get-tag.outputs.tag }}-win-x64.zip` - *Single executable in ZIP*
          - **macOS (ARM64)**: `DocxTemplate-${{ steps.get-tag.outputs.tag }}-osx-arm64.app.zip` - *Apple Silicon*
          
          ### üéØ What's Included
          - **GUI Application**: Easy-to-use graphical interface with step-by-step wizard
          - **CLI Tool**: Command-line interface for automation and batch processing  
          - **Sample Templates**: Czech language templates for testing
          - **Documentation**: Quick start guide and usage examples
          
          ### ‚úÖ System Requirements
          - **Windows**: Windows 10 version 1709 or later (x64) 
          - **macOS**: macOS 10.15 Catalina or later (Apple Silicon only)
          - **No additional software required** - fully self-contained
          
          ### üöÄ Quick Start
          **Windows**: 
          1. Download `DocxTemplate-[version]-win-x64.zip`
          2. Extract the ZIP file
          3. Double-click `DocxTemplate.exe` to run - no installation needed!
          
          **macOS (Apple Silicon)**:
          1. Download `DocxTemplate-[version]-osx-arm64.app.zip`  
          2. Extract and double-click `DocxTemplate.app`
          3. If blocked by security, right-click ‚Üí Open ‚Üí Open anyway
          
          ### üîß CLI Usage
          ```bash
          # Windows - Extract ZIP and use the executable
          DocxTemplate.exe --help
          
          # macOS - Access CLI through the app bundle
          ./DocxTemplate.app/Contents/MacOS/DocxTemplate --help
          ```
          
          Both applications include GUI and CLI functionality in a single executable.
        draft: false
        prerelease: ${{ contains(steps.get-tag.outputs.tag, 'alpha') || contains(steps.get-tag.outputs.tag, 'beta') || contains(steps.get-tag.outputs.tag, 'rc') }}

  build-windows:
    name: Build Windows Distribution  
    runs-on: windows-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: windows-release-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: windows-release-nuget-
        
    - name: Clean and restore dependencies
      run: |
        dotnet clean --verbosity minimal
        dotnet restore --verbosity minimal
      
    - name: Build and test before release
      run: |
        # Build CLI first to avoid file locking issues
        dotnet build src/DocxTemplate.CLI/DocxTemplate.CLI.csproj --configuration Release --verbosity minimal
        
        # Test CLI executable can be built and runs
        Write-Host "Testing CLI build..." -ForegroundColor Cyan
        dotnet run --project src/DocxTemplate.CLI/DocxTemplate.CLI.csproj --configuration Release --verbosity minimal -- --version
        
        # Build UI project (with SkipCliBuild to avoid conflicts)  
        dotnet build src/DocxTemplate.UI/DocxTemplate.UI.csproj --configuration Release --verbosity minimal
        
        Write-Host "Pre-release build and test completed successfully" -ForegroundColor Green
      
    - name: Publish Windows GUI (single-file)
      run: |
        Write-Host "Publishing GUI application as single file..." -ForegroundColor Cyan
        dotnet publish src/DocxTemplate.UI/DocxTemplate.UI.csproj `
          --configuration Release `
          --runtime win-x64 `
          --self-contained true `
          --output ./dist/windows-gui `
          --verbosity minimal `
          -p:SkipCliBuild=true `
          -p:PublishSingleFile=true `
          -p:EnableCompressionInSingleFile=true `
          -p:PublishTrimmed=false `
          -p:PublishReadyToRun=true
      
    - name: Create Windows distribution package
      run: |
        Write-Host "Creating Windows distribution package..." -ForegroundColor Cyan
        $releaseDir = "./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-win-x64"
        New-Item -ItemType Directory -Force -Path $releaseDir | Out-Null
        
        # Copy the single-file GUI executable
        Copy-Item -Path "./dist/windows-gui/DocxTemplate.UI.exe" -Destination "$releaseDir/DocxTemplate.exe"
        
        # Create a simple README
        $readmeText = "DocxTemplate ${{ needs.create-release.outputs.tag-name }} - Windows x64`n================================================================`n`nQUICK START:`n1. Double-click 'DocxTemplate.exe' to launch the application`n2. The application includes both GUI and CLI functionality`n`nCLI USAGE:`n1. Open Command Prompt in this folder`n2. Run: DocxTemplate.exe --help`n`nSYSTEM REQUIREMENTS:`n- Windows 10 version 1709 or later`n- x64 architecture`n- No additional software installation required`n`nSUPPORT:`n- Documentation: https://github.com/jirihalaska/docx-template-cli`n- Issues: https://github.com/jirihalaska/docx-template-cli/issues`n- Version: ${{ needs.create-release.outputs.tag-name }}"
        $readmeText | Out-File -FilePath "$releaseDir/README.txt" -Encoding UTF8
        
        # Verify the executable
        $fileInfo = Get-Item "$releaseDir/DocxTemplate.exe"
        $fileSizeMB = [math]::Round($fileInfo.Length / 1MB, 2)
        Write-Host "‚úÖ Windows package created with executable: DocxTemplate.exe (${fileSizeMB}MB)" -ForegroundColor Green
      
    - name: Test Windows executable
      run: |
        $releaseDir = "./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-win-x64"
        $exeFile = "$releaseDir/DocxTemplate.exe"
        Write-Host "Testing Windows executable..." -ForegroundColor Cyan
        
        # Test executable runs
        Write-Host "Testing executable startup..." -ForegroundColor Yellow
        & $exeFile --version
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Windows executable test passed" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Windows executable test failed" -ForegroundColor Red
            exit 1
        }
        
        Write-Host "‚úÖ Windows package ready!" -ForegroundColor Green
      
    - name: Create Windows ZIP package
      run: |
        $releaseDir = "./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-win-x64"
        $zipPath = "./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-win-x64.zip"
        Write-Host "Creating ZIP package: $zipPath" -ForegroundColor Cyan
        Compress-Archive -Path "$releaseDir/*" -DestinationPath $zipPath -Force
        
        # Verify ZIP was created and show size
        if (Test-Path $zipPath) {
            $zipSize = [math]::Round((Get-Item $zipPath).Length / 1MB, 2)
            Write-Host "‚úÖ ZIP package created successfully: ${zipSize}MB" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Failed to create ZIP package" -ForegroundColor Red
            exit 1
        }
      
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.create-release.outputs.tag-name }}
        files: ./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-win-x64.zip
        
    - name: Upload Windows package for inspection
      uses: actions/upload-artifact@v4
      with:
        name: windows-release-${{ needs.create-release.outputs.tag-name }}
        path: ./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-win-x64/
        retention-days: 30

  build-macos-arm64:
    name: Build macOS ARM64 Distribution
    runs-on: macos-latest  
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: macos-arm64-release-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: macos-arm64-release-nuget-
        
    - name: Clean and restore dependencies
      run: |
        dotnet clean --verbosity minimal
        dotnet restore --verbosity minimal
      
    - name: Build and test before release
      run: |
        echo "üçé Building CLI first to avoid file locking issues..."
        dotnet build src/DocxTemplate.CLI/DocxTemplate.CLI.csproj --configuration Release --verbosity minimal
        
        echo "üß™ Testing CLI build..."
        dotnet run --project src/DocxTemplate.CLI/DocxTemplate.CLI.csproj --configuration Release --verbosity minimal -- --version
        
        echo "üé® Building UI project..."
        dotnet build src/DocxTemplate.UI/DocxTemplate.UI.csproj --configuration Release --verbosity minimal
        
        echo "‚úÖ Pre-release build and test completed successfully"
      
    - name: Publish macOS ARM64 GUI (single-file)
      run: |
        echo "üì± Publishing GUI application as single file for ARM64..."
        dotnet publish src/DocxTemplate.UI/DocxTemplate.UI.csproj \
          --configuration Release \
          --runtime osx-arm64 \
          --self-contained true \
          --output ./dist/macos-arm64-gui \
          --verbosity minimal \
          -p:SkipCliBuild=true \
          -p:PublishSingleFile=true \
          -p:EnableCompressionInSingleFile=true \
          -p:PublishTrimmed=false \
          -p:PublishReadyToRun=true
      
    - name: Create macOS App Bundle
      run: |
        echo "üçé Creating macOS App Bundle..."
        APP_NAME="DocxTemplate"
        APP_DIR="./release/${APP_NAME}.app"
        
        # Create .app bundle structure
        mkdir -p "$APP_DIR/Contents/MacOS"
        mkdir -p "$APP_DIR/Contents/Resources"
        
        # Copy the single-file executable
        echo "üì± Copying Avalonia GUI application..."
        cp "./dist/macos-arm64-gui/DocxTemplate.UI" "$APP_DIR/Contents/MacOS/$APP_NAME"
        chmod +x "$APP_DIR/Contents/MacOS/$APP_NAME"
        
        # Create Info.plist for the app bundle
        echo "üìÑ Creating Info.plist..."
        cat > "$APP_DIR/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleName</key>
            <string>DocxTemplate</string>
            <key>CFBundleDisplayName</key>
            <string>DocxTemplate</string>
            <key>CFBundleIdentifier</key>
            <string>com.jirihalaska.docxtemplate</string>
            <key>CFBundleVersion</key>
            <string>${{ needs.create-release.outputs.tag-name }}</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ needs.create-release.outputs.tag-name }}</string>
            <key>CFBundleExecutable</key>
            <string>$APP_NAME</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleSignature</key>
            <string>????</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.15</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>NSPrincipalClass</key>
            <string>NSApplication</string>
        </dict>
        </plist>
        EOF
        
        echo "‚úÖ macOS App Bundle created successfully!"
        
        # Show bundle info
        echo ""
        echo "üì¶ App Bundle info:"
        ls -la "$APP_DIR/Contents/MacOS/"
        echo "Bundle size: $(du -sh "$APP_DIR" | cut -f1)"
      
    - name: Test macOS App Bundle
      run: |
        APP_DIR="./release/DocxTemplate.app"
        echo "üß™ Testing macOS App Bundle..."
        
        # Test app bundle executable
        echo "üçé Testing App Bundle executable..."
        "$APP_DIR/Contents/MacOS/DocxTemplate" --version
        if [ $? -eq 0 ]; then
            echo "‚úÖ App Bundle executable test passed"
        else
            echo "‚ùå App Bundle executable test failed"
            exit 1
        fi
        
        # Verify app bundle structure
        if [ -f "$APP_DIR/Contents/Info.plist" ]; then
            echo "‚úÖ Info.plist exists"
        else
            echo "‚ùå Missing Info.plist"
            exit 1
        fi
        
        echo "‚úÖ macOS App Bundle tests passed!"
      
    - name: Create macOS App Bundle ZIP package
      run: |
        ZIP_PATH="./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64.app.zip"
        echo "üì¶ Creating App Bundle ZIP package: $ZIP_PATH"
        cd "./release"
        zip -r "DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64.app.zip" "DocxTemplate.app/"
        
        # Verify ZIP was created and show size
        if [ -f "DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64.app.zip" ]; then
            ZIP_SIZE=$(du -h "DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64.app.zip" | cut -f1)
            echo "‚úÖ App Bundle ZIP package created successfully: ${ZIP_SIZE}"
        else
            echo "‚ùå Failed to create ZIP package"
            exit 1
        fi
        
        cd ..
      
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.create-release.outputs.tag-name }}
        files: ./release/DocxTemplate-${{ needs.create-release.outputs.tag-name }}-osx-arm64.app.zip
        
    - name: Upload App Bundle for inspection
      uses: actions/upload-artifact@v4
      with:
        name: macos-arm64-release-${{ needs.create-release.outputs.tag-name }}
        path: ./release/DocxTemplate.app/
        retention-days: 30

