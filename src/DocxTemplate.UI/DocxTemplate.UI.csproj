<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <BuiltInComInteropSupport>true</BuiltInComInteropSupport>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>
    
    <!-- Self-contained deployment configuration -->
    <PublishSingleFile>true</PublishSingleFile>
    <SelfContained>true</SelfContained>
    <PublishReadyToRun>true</PublishReadyToRun>
    
    <!-- Native AOT configuration (disabled due to Avalonia compatibility issues) -->
    <!-- <PublishAot>true</PublishAot> -->
    <!-- <TrimMode>link</TrimMode> -->
    <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
  </PropertyGroup>

  <ItemGroup>
    <Folder Include="Models\" />
    <AvaloniaResource Include="Assets\**" />
  </ItemGroup>

  <!-- Trimmer configuration for Native AOT -->
  <ItemGroup>
    <TrimmerRootAssembly Include="Avalonia.Themes.Fluent" />
    <TrimmerRootAssembly Include="Avalonia.Themes.Default" />
    <TrimmerRootAssembly Include="DocxTemplate.Core" />
    <TrimmerRootAssembly Include="DocxTemplate.UI" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia" Version="11.3.4" />
    <PackageReference Include="Avalonia.Desktop" Version="11.3.4" />
    <PackageReference Include="Avalonia.Themes.Fluent" Version="11.3.4" />
    <PackageReference Include="Avalonia.Fonts.Inter" Version="11.3.4" />
    <!--Condition below is needed to remove Avalonia.Diagnostics package from build output in Release configuration.-->
    <PackageReference Include="Avalonia.Diagnostics" Version="11.3.4">
      <IncludeAssets Condition="'$(Configuration)' != 'Debug'">None</IncludeAssets>
      <PrivateAssets Condition="'$(Configuration)' != 'Debug'">All</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Avalonia.ReactiveUI" Version="11.3.4" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="9.0.0" />
    <PackageReference Include="Microsoft.Extensions.Hosting" Version="9.0.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\DocxTemplate.Core\DocxTemplate.Core.csproj" />
  </ItemGroup>

  <!-- Build CLI project and copy executable to UI output directory -->
  <Target Name="BuildAndCopyCliExecutable" AfterTargets="Build" BeforeTargets="Publish" Condition="'$(SkipCliBuild)' != 'true'">
    <PropertyGroup>
      <CliProjectPath>$(MSBuildThisFileDirectory)..\DocxTemplate.CLI\DocxTemplate.CLI.csproj</CliProjectPath>
      <!-- Handle runtime-specific paths - use publish output for self-contained, build output for regular build -->
      <CliOutputPath Condition="'$(RuntimeIdentifier)' != ''">$(MSBuildThisFileDirectory)..\DocxTemplate.CLI\bin\$(Configuration)\$(TargetFramework)\$(RuntimeIdentifier)\publish</CliOutputPath>
      <CliOutputPath Condition="'$(RuntimeIdentifier)' == ''">$(MSBuildThisFileDirectory)..\DocxTemplate.CLI\bin\$(Configuration)\$(TargetFramework)</CliOutputPath>
      <!-- For published self-contained, the executable name changes -->
      <CliExecutableName Condition="'$(RuntimeIdentifier)' != '' AND $([MSBuild]::IsOSPlatform('Windows'))">DocxTemplate.CLI.exe</CliExecutableName>
      <CliExecutableName Condition="'$(RuntimeIdentifier)' != '' AND !$([MSBuild]::IsOSPlatform('Windows'))">DocxTemplate.CLI</CliExecutableName>
      <CliExecutableName Condition="'$(RuntimeIdentifier)' == '' AND $([MSBuild]::IsOSPlatform('Windows'))">DocxTemplate.CLI.exe</CliExecutableName>
      <CliExecutableName Condition="'$(RuntimeIdentifier)' == '' AND !$([MSBuild]::IsOSPlatform('Windows'))">DocxTemplate.CLI</CliExecutableName>
      <CliExecutableSource>$(CliOutputPath)/$(CliExecutableName)</CliExecutableSource>
      <CliExecutableTarget Condition="$([MSBuild]::IsOSPlatform('Windows'))">$(OutputPath)docx-template.exe</CliExecutableTarget>
      <CliExecutableTarget Condition="!$([MSBuild]::IsOSPlatform('Windows'))">$(OutputPath)docx-template</CliExecutableTarget>
    </PropertyGroup>
    
    <Message Text="Building CLI project: $(CliProjectPath)" Importance="high" />
    
    <!-- Build the CLI project as self-contained if runtime identifier is specified, otherwise as regular build -->
    <MSBuild Projects="$(CliProjectPath)" 
             Properties="Configuration=$(Configuration);TargetFramework=$(TargetFramework);RuntimeIdentifier=$(RuntimeIdentifier);SelfContained=true;PublishSingleFile=true" 
             Targets="Publish" 
             Condition="'$(RuntimeIdentifier)' != ''" />
    <MSBuild Projects="$(CliProjectPath)" 
             Properties="Configuration=$(Configuration);TargetFramework=$(TargetFramework)" 
             Targets="Build" 
             Condition="'$(RuntimeIdentifier)' == ''" />
    
    <Message Text="Copying CLI executable from $(CliExecutableSource) to $(CliExecutableTarget)" Importance="high" />
    
    <!-- Copy the CLI executable to UI output directory with the expected name -->
    <Copy SourceFiles="$(CliExecutableSource)" 
          DestinationFiles="$(CliExecutableTarget)" 
          Condition="Exists('$(CliExecutableSource)')"
          SkipUnchangedFiles="true" />
          
    <!-- Also copy required runtime dependencies if they exist -->
    <ItemGroup>
      <CliRuntimeFiles Include="$(CliOutputPath)/*.dll" />
      <CliRuntimeFiles Include="$(CliOutputPath)/*.json" />
      <CliRuntimeFiles Include="$(CliOutputPath)/*.pdb" Condition="'$(Configuration)' == 'Debug'" />
    </ItemGroup>
    
    <Copy SourceFiles="@(CliRuntimeFiles)" 
          DestinationFolder="$(OutputPath)" 
          SkipUnchangedFiles="true" 
          Condition="@(CliRuntimeFiles) != ''" />
          
    <Warning Text="CLI executable not found at $(CliExecutableSource) after build attempt." 
             Condition="!Exists('$(CliExecutableSource)')" />
  </Target>

  <!-- Copy templates folder to UI output directory for testing (disabled by default for performance) -->
  <Target Name="CopyTemplatesFolder" AfterTargets="Build" BeforeTargets="Publish" Condition="'$(IncludeTemplatesForTesting)' == 'true'">
    <PropertyGroup>
      <TemplatesSourcePath>$(MSBuildThisFileDirectory)../../templates</TemplatesSourcePath>
      <TemplatesTargetPath>$(OutputPath)templates</TemplatesTargetPath>
    </PropertyGroup>
    
    <Message Text="Copying templates folder from $(TemplatesSourcePath) to $(TemplatesTargetPath)" Importance="high" />
    
    <!-- Create target directory if it doesn't exist -->
    <MakeDir Directories="$(TemplatesTargetPath)" Condition="Exists('$(TemplatesSourcePath)') AND !Exists('$(TemplatesTargetPath)')" />
    
    <!-- Copy all files from templates directory -->
    <ItemGroup>
      <TemplateFiles Include="$(TemplatesSourcePath)/**/*.*" />
    </ItemGroup>
    
    <Copy SourceFiles="@(TemplateFiles)" 
          DestinationFiles="@(TemplateFiles->'$(TemplatesTargetPath)/%(RecursiveDir)%(Filename)%(Extension)')" 
          SkipUnchangedFiles="true"
          Condition="Exists('$(TemplatesSourcePath)')" />
          
    <Warning Text="Templates folder not found at $(TemplatesSourcePath). Testing data will not be available." 
             Condition="!Exists('$(TemplatesSourcePath)')" />
  </Target>

  <!-- Include CLI executable and templates as content for publishing -->
  <Target Name="IncludeCliAndTemplatesForPublish" BeforeTargets="PublishApp" DependsOnTargets="BuildAndCopyCliExecutable;CopyTemplatesFolder">
    <ItemGroup>
      <!-- Include CLI executable -->
      <ResolvedFileToPublish Include="$(OutputPath)docx-template*" Condition="Exists('$(OutputPath)docx-template')" />
      <ResolvedFileToPublish Include="$(OutputPath)docx-template.exe" Condition="Exists('$(OutputPath)docx-template.exe')" />
      <!-- Include templates directory -->
      <ResolvedFileToPublish Include="$(OutputPath)templates\**\*" RelativePath="templates\%(RecursiveDir)%(Filename)%(Extension)" Condition="Exists('$(OutputPath)templates')" />
    </ItemGroup>
  </Target>
</Project>
